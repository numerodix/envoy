#include <cstdint>

bool is_healthy(uint64_t healthy, uint64_t degraded, uint64_t total,
                double min_healthy_perc) {
    return ((healthy + degraded) < total * min_healthy_perc / 100.0);
}



.LCPI0_0:
        .long   1127219200              # 0x43300000
        .long   1160773632              # 0x45300000
        .long   0                       # 0x0
        .long   0                       # 0x0
.LCPI0_1:
        .quad   4841369599423283200     # double 4503599627370496
        .quad   4985484787499139072     # double 1.9342813113834067E+25
.LCPI0_2:
        .quad   4636737291354636288     # double 100
is_healthy(unsigned long, unsigned long, unsigned long, double):                     # @is_healthy(unsigned long, unsigned long, unsigned long, double)
        add     rdi, rsi
        movq    xmm1, rdi
        movdqa  xmm2, xmmword ptr [rip + .LCPI0_0] # xmm2 = [1127219200,1160773632,0,0]
        punpckldq       xmm1, xmm2      # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
        movapd  xmm3, xmmword ptr [rip + .LCPI0_1] # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
        subpd   xmm1, xmm3
        movapd  xmm4, xmm1
        unpckhpd        xmm4, xmm1      # xmm4 = xmm4[1],xmm1[1]
        addsd   xmm4, xmm1
        movq    xmm1, rdx
        punpckldq       xmm1, xmm2      # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
        subpd   xmm1, xmm3
        movapd  xmm2, xmm1
        unpckhpd        xmm2, xmm1      # xmm2 = xmm2[1],xmm1[1]
        addsd   xmm2, xmm1
        mulsd   xmm2, xmm0
        divsd   xmm2, qword ptr [rip + .LCPI0_2]
        ucomisd xmm2, xmm4
        seta    al
        ret
